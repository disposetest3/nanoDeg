version: 2.1

jobs:
  hello-world:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Say Hello
          command: |
            echo "Hello World"

  #build phase
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd ./frontend && npm i && npm run build 

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd ./backend && npm i && npm run build

  #Unit test phase
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend Test
          command: | 
            cd ./frontend && npm i
            npm install --save-dev jest-junit
            npm run test --ci --reporters=default --reporters=jest-junit
          
      - store_test_results:
          path: ./frontend/test-results/
      - store_artifacts:
          path: ./frontend/test-results/jest/results.xml
    
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
    
          name: Backend Test
          command: |
            cd ./backend && npm i
            npm install --save-dev jest-junit
            npm run test --ci --reporters=default --reporters=jest-junit
      - store_test_results:
          path: ./backend/test-results/
      - store_artifacts:
          path: ./backend/test-results/jest/results.xml

  #tests for security
  frontend-security:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend Security Test
          command: | 
            cd ./frontend && npm i
            npm audit --audit-level=critical
       
  backend-security:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Backend Security Test
          command: |
            cd ./backend && npm i
            npm audit --audit-level=critical

  #Infrastructure creation
  network-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup network infrastructure
          command: |
            cd ./.circleci/files
            aws cloudformation deploy --template-file ./network.yml --stack-name nanoDegNetworkStack --region us-west-2
            
  cloudfront-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup cloudfront infrastructure
          command: |
            cd ./.circleci/files
            aws cloudformation deploy --template-file ./cloudfront.yml --stack-name nanoDegCloudfrontStack --region us-west-2

  backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup backend infrastructure
          command: |
            cd ./.circleci/files
            aws cloudformation deploy --template-file ./backend.yml --stack-name nanoDegBackendStack --region us-west-2
       
  

  frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup frontend infrastructure
          command: |
            cd ./.circleci/files
            aws cloudformation deploy --template-file ./frontend.yml --stack-name nanoDegFrontendStack --region us-west-2
  #Configure server
  backend-config:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["48:54:a0:b5:41:d3:4e:c2:0f:f8:b4:1e:8b:08:d5:35"]
      - run:
          name: Server dependencies
          command: |
              apk add --update ansible 
              #run ansible playbook
              cd ./.circleci/ansible
              ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt main.yml
              
  #database migration
  db-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Database migrations
          command: |
            cd ./backend && npm i
            npm run migrations


workflows:
  default:
    jobs:
      #- hello-world
      #- build-frontend:
      #   requires:
      #     - hello-world
      #- build-backend:
      #   requires:
      #     - hello-world
      #- test-frontend:
      #   requires:
      #     - build-frontend
      #     - build-backend
      #- test-backend:
      #   requires:
      #     - build-backend
      #     - build-frontend
      #- frontend-security:
      #   requires:
      #     - test-frontend
      #     - test-backend
      #- backend-security:
      #   requires:
      #     - test-backend
      #     - test-frontend
      #- network-infrastructure:
      #   requires:
      #     - frontend-security
      #     - backend-security
      #- frontend-infrastructure:
      #   requires:
      #     - network-infrastructure
      #- backend-infrastructure:
      #   requires:
      #     - frontend-infrastructure
      #- cloudfront-infrastructure:
      #   requires:
      #     - backend-infrastructure
      #- backend-config:
      #   requires:
      #     - backend-infrastructure
      - db-migrations

           
